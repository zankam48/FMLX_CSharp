classDiagram
    class Game {
        +Game(players: List~Player~, board: Board)
        +StartGame() : void
        +EndGame() : void
        +nextPlayerTurn() : void
        +Action~Player~OnNextPlayerTurn()
        +currentPlayer : Player
        +players : List~Player~
        +GetWinner() : Player
        +SetBoard() : void
        +Dice dice
        -Board board
        +isEnd : bool
        +MovePiece(Piece piece) : void
        +ChoosePiece(Piece piece) : piece
        +isOverlapped(Player player1, Player player2) : bool
        +RollDice() : int
        +Action<Dice> OnDiceRoll
    }


    class Player {
        -name : string
        -PieceColor color
        %% +currentPosition : int
        -piece : List~Piece~
        -score : int
        +Player(name: string, color: PieceColor, piece: List~Piece~, score: int)
        +SetColor(PieceColor color) : void 
        +GetScore() : int
        
        %% +CheckWin() : bool
        -canMakeMove : bool
    }

    class Board {
        -squares: List~Square~
        -pieces: List~Piece~
        -safeZone: List~Square~
        -startPositions: Dict~string, List int ~
        -goalPositions: Dict~string, List int ~
        +Board()
        +GetSquare(int position) : Square
        %% +SetGoal() : void
        +SetPath(Piece piece) : void
        +GetGoalPositions() : Dict[str, int[]] 
        +GetStartPositions() : Dict[str, int[]]
    }

    class Piece {
        -Dice dice
        -PieceColor color
        -position : int
        +Piece(color: PieceColor, position: int)
        +MoveWithValue(int diceValue) : void
        +isAtGoal() : bool
        +isAtHome() : bool
        
    }

    class Square {
        +Square(color: PieceColor, position: int)
        -PieceColor color
        -position : int
        +isOccupied() : bool
        
    }

    class Dice {
        +Dice()
        -diceValue : int
        %% +DiceRollDelegate()
    }

    class PieceColor {
        <<enum>>
        YELLOW
        RED
        BLUE
        GREEN
    }

    Game "" --> "2..4" Player : has
    Board "" *--* "8..16" Piece : contains
    Board *--* "72" Square : contains
    Game "" --> "1..2" Dice : uses
    Player "1" --> "4" Piece : has
    PieceColor --> Piece
    Game --> Board

    %% Delegatenya bisa dipake untuk rolldice kareana
    %% kita bisa aja punya 2 dadu dan value untuk rolldicenya diganti 
    %% add possible pawn to move -> choose pawn di player
    %% Private access modifier untuk enkapsulasi dan menghindari
    %% tight coupling intinya untuk decoupling
    %% func minta info ke frontend, action backend ngasih info, subscriber fronted
    %% interace di game controller for decoupling
    %% Instantiate di luar game controller, dan objeknya itu di pass as a parameter di game controllernya itu
    %% bintang = safe zone 

classDiagram
    class Game {
        +Game(players: List~Player~, board: Board)
        +StartGame() : void
        +EndGame() : void
        +nextPlayerTurn() : void
        +Action~Player~OnNextPlayerTurn()
        +currentPlayer : Player
        +players : List~Player~
        +GetWinner() : Player
        +SetBoard() : void
        +Dice dice
        -Board board
        +isEnd : bool
        +MovePiece(Piece piece) : void
        +ChoosePiece(Piece piece) : piece
        +isOverlapped(Player player1, Player player2) : bool
        +RollDice() : int
        +Action<Dice> OnDiceRoll
    }


    class Player {
        -name : string
        -PieceColor color
        %% +currentPosition : int
        -piece : List~Piece~
        -score : int
        +Player(name: string, color: PieceColor, piece: List~Piece~, score: int)
        +SetColor(PieceColor color) : void 
        +GetScore() : int
        
        %% +CheckWin() : bool
        -canMakeMove : bool
    }

    class Board {
        -squares: List~Square~
        -pieces: List~Piece~
        -safeZone: List~Square~
        -startPositions: Dict~string, List int ~
        -goalPositions: Dict~string, List int ~
        +Board()
        +GetSquare(int position) : Square
        %% +SetGoal() : void
        +SetPath(Piece piece) : void
        +GetGoalPositions() : Dict[str, int[]] 
        +GetStartPositions() : Dict[str, int[]]
    }

    class Piece {
        -PieceColor color
        -position : int
        +Piece(color: PieceColor, position: int)
        +MoveWithValue(int diceValue) : void
        +isAtGoal() : bool
        +isAtHome() : bool
        
    }

    class Square {
        +Square(color: PieceColor, position: int)
        -PieceColor color
        -position : int
        +isOccupied() : bool
        
    }

    class Dice {
        +Dice()
        -diceValue : int
        %% +DiceRollDelegate()
    }

    class PieceColor {
        <<enum>>
        YELLOW
        RED
        BLUE
        GREEN
    }

    Game "" --> "2..4" Player : has
    Board "" *--* "8..16" Piece : contains
    Board *--* "72" Square : contains
    Game "" --> "1..2" Dice : uses
    Player "1" --> "4" Piece : has
    PieceColor --> Piece
    Game --> Board

    %% Delegatenya bisa dipake untuk rolldice kareana
    %% kita bisa aja punya 2 dadu dan value untuk rolldicenya diganti 
    %% add possible pawn to move -> choose pawn di player
    %% Private access modifier untuk enkapsulasi dan menghindari
    %% tight coupling intinya untuk decoupling
    %% func minta info ke frontend, action backend ngasih info, subscriber fronted
    %% interace di game controller for decoupling
    %% Instantiate di luar game controller, dan objeknya itu di pass as a parameter di game controllernya itu
    %% bintang = safe zone 
    %% skip player

